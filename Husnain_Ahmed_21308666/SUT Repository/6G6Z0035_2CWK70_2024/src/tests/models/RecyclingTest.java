package models;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

// All tests written by Husnain Ahmed (21308666@stu.mmu.ac.uk)

class RecyclingTest {


    static class TestRecycling extends Recycling { //IntelliJ autogenerated this to fix an error
        private final String generation;
        private final List<Double> rates;

        protected TestRecycling(Location location, int yearsActive, String generation, List<Double> rates) {
            super(location, yearsActive);
            this.generation = generation;
            this.rates = rates;
        }

        @Override
        public String getGeneration() {
            return generation;
        }

        @Override
        public List<Double> getRates() {
            return rates;
        }
    }

    @DisplayName("Testing getYearsActive")
    @Test
    void Recycling_getYearsActive_ReturnsYearsActive() {

        Recycling recycling = new TestRecycling(Location.A, 10, "Alpha", List.of(1.0, 1.0, 1.0));

        int Result = recycling.getYearsActive();

        assertEquals(10, Result, "The result was not equal to the expected value.");
    }

    @DisplayName("Testing getGeneration")
    @Test
    void Recycling_GetGeneration_ReturnsGeneration() {

        Recycling recycling = new TestRecycling(Location.A, 10, "Alpha", List.of(1.0, 1.0, 1.0));

        String Result = recycling.getGeneration();

        assertEquals("Alpha", Result, "The result was not equal to the expected value.");
    }

    @DisplayName("Testing getRates")
    @Test
    void Recycling_GetRates_ReturnsRates() {

        Recycling recycling = new TestRecycling(Location.A, 10, "Alpha", List.of(1.0, 1.0, 1.0));

        List<Double> Result = recycling.getRates();

        assertEquals(List.of(1.0, 1.0, 1.0), Result, "The result was not equal to the expected value.");
    }

    @DisplayName("Testing getLocation")
    @Test
    void Recycling_GetLocation_ReturnsLocation() {

        Recycling recycling = new TestRecycling(Location.A, 10, "Alpha", List.of(1.0, 1.0, 1.0));

        Location Result = recycling.getLocation();

        assertEquals(Location.A, Result, "The result was not equal to the expected value.");
    }

    @DisplayName("Testing whether YearsActive can be set as a negative value.")
    @Test
    void Recycling_setYearsActiveAsNegative_DoesNotInitialise() {

        Recycling recycling = new TestRecycling(Location.A, -10, "Alpha", List.of(1.0, 1.0, 1.0));

        int Result = recycling.getYearsActive();

        assertFalse(Result == -10, "The YearsActive values have been set to a negative value.");
    }
}